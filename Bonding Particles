let particles = [];
let numParticles = 1000;
let innerRadius = 100; // Inner radius of the ring
let outerRadius = 200; // Outer radius of the ring

function setup() {
  createCanvas(windowWidth, windowHeight);
  for (let i = 0; i < numParticles; i++) {
    let angle = random(TWO_PI);
    let r = random(innerRadius, outerRadius);
    let x = width / 2 + r * cos(angle);
    let y = height / 2 + r * sin(angle);
    particles.push(new Particle(x, y, angle, r));
  }
}

function draw() {
  background('#111111');
  for (let particle of particles) {
    particle.update();
    particle.show();
  }

  let mouse = createVector(mouseX, mouseY);
  for (let particle of particles) {
    let d = dist(particle.pos.x, particle.pos.y, mouse.x, mouse.y);
    if (d < 100) {
      let flee = p5.Vector.sub(particle.pos, mouse);
      flee.setMag(map(d, 0, 100, 3, 0.1)); // Gradual acceleration based on distance
      particle.applyForce(flee);
    }
  }
}

function mousePressed() {
  let mouse = createVector(mouseX, mouseY);
  for (let particle of particles) {
    let burst = p5.Vector.sub(particle.pos, mouse);
    burst.setMag(10); // Strong burst effect
    particle.applyForce(burst);
  }
}

class Particle {
  constructor(x, y, angle, orbitRadius) {
    this.pos = createVector(x, y);
    this.angle = angle;
    this.orbitRadius = orbitRadius;
    this.orbitSpeed = random(0.01, 0.03);
    this.vel = createVector(0, 0);
    this.acc = createVector(0, 0);
  }

  applyForce(force) {
    this.acc.add(force);
  }

  update() {
    this.angle += this.orbitSpeed;
    let targetX = width / 2 + this.orbitRadius * cos(this.angle);
    let targetY = height / 2 + this.orbitRadius * sin(this.angle);
    let target = createVector(targetX, targetY);
    
    let returnForce = p5.Vector.sub(target, this.pos);
    returnForce.mult(0.1); // Return force to pull the particles back to their orbit
    this.applyForce(returnForce);

    this.vel.add(this.acc);
    this.pos.add(this.vel);
    this.acc.mult(0); // Reset acceleration after each frame
    this.vel.mult(0.95); // Add some damping to the velocity for smooth motion
  }

  show() {
    stroke('#FFFFFF');
    strokeWeight(2);
    point(this.pos.x, this.pos.y);
  }
}
